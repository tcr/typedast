==== tests/cases/compiler/incompatibleTypes.ts (9 errors) ====
    interface IFoo1 {
        p1(): number;
    }
    
    class C1 implements IFoo1 { // incompatible on the return type
          ~~
!!! Class 'C1' incorrectly implements interface 'IFoo1':
!!!   Types of property 'p1' are incompatible:
!!!     Type '() => string' is not assignable to type '() => number':
!!!       Type 'string' is not assignable to type 'number'.
        public p1() {
            return "s";
        }
    }
    
    interface IFoo2 {
        p1(s:string): number;
    }
    
    class C2 implements IFoo2 { // incompatible on the param type
          ~~
!!! Class 'C2' incorrectly implements interface 'IFoo2':
!!!   Types of property 'p1' are incompatible:
!!!     Type '(n: number) => number' is not assignable to type '(s: string) => number':
!!!       Types of parameters 'n' and 's' are incompatible:
!!!         Type 'number' is not assignable to type 'string'.
        public p1(n:number) {
            return 0;
        }
    }
    
    interface IFoo3 {
        p1: string;
    }
    
    class C3 implements IFoo3 { // incompatible on the property type
          ~~
!!! Class 'C3' incorrectly implements interface 'IFoo3':
!!!   Types of property 'p1' are incompatible:
!!!     Type 'number' is not assignable to type 'string'.
        public p1: number;
    }
    
    interface IFoo4 {
        p1: { a: { a: string; }; b: string; };
    }
    
    class C4 implements IFoo4 { // incompatible on the property type
          ~~
!!! Class 'C4' incorrectly implements interface 'IFoo4':
!!!   Types of property 'p1' are incompatible:
!!!     Type '{ c: { b: string; }; d: string; }' is not assignable to type '{ a: { a: string; }; b: string; }':
!!!       Property 'a' is missing in type '{ c: { b: string; }; d: string; }'.
        public p1: { c: { b: string; }; d: string; };
    }
    
    function if1(i: IFoo1): void;
    function if1(i: IFoo2): void;
    function if1(a: any) { }
    var c1: C1;
    var c2: C2;
    if1(c1);
        ~~
!!! Argument of type 'C1' is not assignable to parameter of type 'IFoo2'.
    
    
    function of1(n: { a: { a: string; }; b: string; }): number;
    function of1(s: { c: { b: string; }; d: string; }): string;
    function of1(a: any) { return null; }
    
    of1({ e: 0, f: 0 });
        ~~~~~~~~~~~~~~
!!! Argument of type '{ e: number; f: number; }' is not assignable to parameter of type '{ c: { b: string; }; d: string; }'.
!!!   Property 'c' is missing in type '{ e: number; f: number; }'.
    
    interface IMap {
     [key:string]:string;
    }
    
    function foo(fn:() => void) {
     
    }
    
    function bar() {
     var map:IMap;
     foo(() => {
      map = {};
     });
    }
    
    var o1: { a: { a: string; }; b: string; } = { e: 0, f: 0 };
        ~~
!!! Type '{ e: number; f: number; }' is not assignable to type '{ a: { a: string; }; b: string; }':
!!!   Property 'a' is missing in type '{ e: number; f: number; }'.
    
    var a1 = [{ e: 0, f: 0 }, { e: 0, f: 0 }, { e: 0, g: 0 }];
    
    
    
    var i1c1: { (): string; } = 5;
        ~~~~
!!! Type 'number' is not assignable to type '() => string'.
    
    var fp1: () =>any = a => 0;
        ~~~
!!! Type '(a: any) => number' is not assignable to type '() => any'.
    