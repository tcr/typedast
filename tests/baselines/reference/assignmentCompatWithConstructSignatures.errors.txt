==== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures.ts (8 errors) ====
    // void returning call signatures can be assigned a non-void returning call signature that otherwise matches
    
    interface T {
        new (x: number): void;
    }
    var t: T;
    var a: { new (x: number): void };
    
    t = a;
    a = t;
    
    interface S {
        new (x: number): string;
    }
    var s: S;
    var a2: { new (x: number): string };
    t = s;
    t = a2;
    a = s;
    a = a2;
    
    interface S2 {
        (x: string): void;
    }
    var s2: S2;
    var a3: { (x: string): void };
    // these are errors
    t = s2;
    ~
!!! Type 'S2' is not assignable to type 'T'.
    t = a3;
    ~
!!! Type '(x: string) => void' is not assignable to type 'T'.
    t = (x: string) => 1;
    ~
!!! Type '(x: string) => number' is not assignable to type 'T'.
    t = function (x: string) { return ''; }
    ~
!!! Type '(x: string) => string' is not assignable to type 'T'.
    a = s2;
    ~
!!! Type 'S2' is not assignable to type 'new (x: number) => void'.
    a = a3;
    ~
!!! Type '(x: string) => void' is not assignable to type 'new (x: number) => void'.
    a = (x: string) => 1;
    ~
!!! Type '(x: string) => number' is not assignable to type 'new (x: number) => void'.
    a = function (x: string) { return ''; }
    ~
!!! Type '(x: string) => string' is not assignable to type 'new (x: number) => void'.
    