==== tests/cases/compiler/promiseChaining2.ts (1 errors) ====
    // same example but with constraints on each type parameter
    class Chain2<T extends { length: number }> {
        constructor(public value: T) { }
        then<S extends Function>(cb: (x: T) => S): Chain2<S> {
            var result = cb(this.value);
            // should get a fresh type parameter which each then call
            var z = this.then(x => result).then(x => "abc").then(x => x.length);
                                                ~~~~~~~~~~
!!! Argument of type '(x: S) => string' is not assignable to parameter of type '(x: S) => Function'.
            return new Chain2(result);
        }
    }