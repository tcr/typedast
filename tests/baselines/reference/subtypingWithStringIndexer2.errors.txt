==== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer2.ts (5 errors) ====
    // Derived type indexer must be subtype of base type indexer
    
    interface Base { foo: string; }
    interface Derived extends Base { bar: string; }
    interface Derived2 extends Derived { baz: string; }
    
    interface A {
        [x: string]: Derived;
    }
    
    interface B extends A {
              ~
!!! Interface 'B' incorrectly extends interface 'A':
!!!   Index signatures are incompatible:
!!!     Type 'Base' is not assignable to type 'Derived':
!!!       Property 'bar' is missing in type 'Base'.
        [x: string]: Base; // error
    }
    
    interface B2 extends A {
        [x: string]: Derived2; // ok
    }
    
    module Generics {
        interface A<T extends Derived> {
            [x: string]: T;
        }
    
        interface B extends A<Base> {
                            ~~~~~~~
!!! Type 'Base' does not satisfy the constraint 'Derived':
!!!   Property 'bar' is missing in type 'Base'.
            [x: string]: Derived; // error
        }
    
        interface B2 extends A<Derived> {
            [x: string]: Derived2; // ok
        }
    
        interface B3<T extends Derived> extends A<T> {
                  ~~
!!! Interface 'B3<T>' incorrectly extends interface 'A<T>':
!!!   Index signatures are incompatible:
!!!     Type 'Base' is not assignable to type 'T'.
            [x: string]: Base; // error
        }
    
        interface B4<T extends Derived> extends A<T> {
                  ~~
!!! Interface 'B4<T>' incorrectly extends interface 'A<T>':
!!!   Index signatures are incompatible:
!!!     Type 'Derived' is not assignable to type 'T'.
            [x: string]: Derived; // error
        }
    
        interface B5<T extends Derived2> extends A<T> {
                  ~~
!!! Interface 'B5<T>' incorrectly extends interface 'A<T>':
!!!   Index signatures are incompatible:
!!!     Type 'Derived2' is not assignable to type 'T'.
            [x: string]: Derived2; // error
        }
    }