==== tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassTransitivity3.ts (1 errors) ====
    // subclassing is not transitive when you can remove required parameters and add optional parameters
    
    class C<T> {
        foo(x: T, y: T) { }
    }
    
    class D<T> extends C<T> {
        foo(x: T) { } // ok to drop parameters
    }
    
    class E<T> extends D<T> {
        foo(x: T, y?: number) { } // ok to add optional parameters
    }
    
    var c: C<string>;
    var d: D<string>;
    var e: E<string>;
    c = e;
    ~
!!! Type 'E<string>' is not assignable to type 'C<string>':
!!!   Types of property 'foo' are incompatible:
!!!     Type '(x: string, y?: number) => void' is not assignable to type '(x: string, y: string) => void':
!!!       Types of parameters 'y' and 'y' are incompatible:
!!!         Type 'number' is not assignable to type 'string'.
    var r = c.foo('', '');
    var r2 = e.foo('', 1);