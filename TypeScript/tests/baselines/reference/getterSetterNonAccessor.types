=== tests/cases/compiler/getterSetterNonAccessor.ts ===
function getFunc():any{return 0;}
>getFunc : () => any

function setFunc(v){}          
>setFunc : (v: any) => void
>v : any

Object.defineProperty({}, "0", <PropertyDescriptor>({
>Object.defineProperty({}, "0", <PropertyDescriptor>({
          get: getFunc,
          set: setFunc,
          configurable: true
      })) : any
>Object.defineProperty : (o: any, p: string, attributes: PropertyDescriptor) => any
>Object : { (): any; (value: any): any; new (value?: any): Object; prototype: Object; getPrototypeOf(o: any): any; getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor; getOwnPropertyNames(o: any): string[]; create(o: any, properties?: PropertyDescriptorMap): any; defineProperty(o: any, p: string, attributes: PropertyDescriptor): any; defineProperties(o: any, properties: PropertyDescriptorMap): any; seal(o: any): any; freeze(o: any): any; preventExtensions(o: any): any; isSealed(o: any): boolean; isFrozen(o: any): boolean; isExtensible(o: any): boolean; keys(o: any): string[]; }
>defineProperty : (o: any, p: string, attributes: PropertyDescriptor) => any
>{} : {}
><PropertyDescriptor>({
          get: getFunc,
          set: setFunc,
          configurable: true
      }) : PropertyDescriptor
>PropertyDescriptor : PropertyDescriptor
>({
          get: getFunc,
          set: setFunc,
          configurable: true
      }) : { get: () => any; set: (v: any) => void; configurable: boolean; }
>{
          get: getFunc,
          set: setFunc,
          configurable: true
      } : { get: () => any; set: (v: any) => void; configurable: boolean; }

          get: getFunc,
>get : () => any
>getFunc : getFunc

          set: setFunc,
>set : (v: any) => void
>setFunc : setFunc

          configurable: true
>configurable : boolean

      }));

