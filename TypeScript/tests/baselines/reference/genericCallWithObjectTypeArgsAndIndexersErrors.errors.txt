==== tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndIndexersErrors.ts (3 errors) ====
    // Type inference infers from indexers in target type, error cases
    
    function foo<T>(x: T) {
        return x;
    }
    
    function other<T>(arg: T) {
        var b: {
            [x: string]: Object;
            [x: number]: T; // ok, T is a subtype of Object because its apparent type is {}
        };
        var r2 = foo(b); // T
    }
    
    function other3<T extends U, U extends Date>(arg: T) {
                    ~~~~~~~~~~~
!!! Constraint of a type parameter cannot reference any type parameter from the same type parameter list.
        var b: {
            [x: string]: Object;
            [x: number]: T;
            ~~~~~~~~~~~~~~~
!!! Numeric index type 'T' is not assignable to string index type 'Object'.
        };
        var r2 = foo(b);
        var d = r2[1];
        var e = r2['1'];
        var u: U = r2[1]; // ok
            ~
!!! Type 'T' is not assignable to type 'U'.
    }