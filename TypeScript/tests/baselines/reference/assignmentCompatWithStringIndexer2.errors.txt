==== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithStringIndexer2.ts (8 errors) ====
    // index signatures must be compatible in assignments
    
    interface Base { foo: string; }
    interface Derived extends Base { bar: string; }
    interface Derived2 extends Derived { baz: string; }
    
    interface A {
        [x: string]: Base;
    }
    
    var a: A;
    
    var b: { [x: string]: Derived; }
    a = b; // ok
    b = a; // error
    ~
!!! Type 'A' is not assignable to type '{ [x: string]: Derived; }':
!!!   Index signatures are incompatible:
!!!     Type 'Base' is not assignable to type 'Derived':
!!!       Property 'bar' is missing in type 'Base'.
    
    var b2: { [x: string]: Derived2; }
    a = b2; // ok
    b2 = a; // error
    ~~
!!! Type 'A' is not assignable to type '{ [x: string]: Derived2; }':
!!!   Index signatures are incompatible:
!!!     Type 'Base' is not assignable to type 'Derived2':
!!!       Property 'baz' is missing in type 'Base'.
    
    module Generics {
        interface A<T extends Base> {
            [x: string]: T;
        }
    
        interface B extends A<Base> {
            [x: string]: Derived; // ok
        }
    
        var b1: { [x: string]: Derived; };
        var a1: A<Base>;
        a1 = b1; // ok
        b1 = a1; // error
        ~~
!!! Type 'A<Base>' is not assignable to type '{ [x: string]: Derived; }':
!!!   Index signatures are incompatible:
!!!     Type 'Base' is not assignable to type 'Derived':
!!!       Property 'bar' is missing in type 'Base'.
    
        interface B2 extends A<Base> {
            [x: string]: Derived2; // ok
        }
    
        var b2: { [x: string]: Derived2; };
        a1 = b2; // ok
        b2 = a1; // error
        ~~
!!! Type 'A<Base>' is not assignable to type '{ [x: string]: Derived2; }':
!!!   Index signatures are incompatible:
!!!     Type 'Base' is not assignable to type 'Derived2':
!!!       Property 'baz' is missing in type 'Base'.
    
        function foo<T extends Base>() {
            var b3: { [x: string]: Derived; };
            var a3: A<T>;
            a3 = b3; // error
            ~~
!!! Type '{ [x: string]: Derived; }' is not assignable to type 'A<T>':
!!!   Index signatures are incompatible:
!!!     Type 'Derived' is not assignable to type 'T'.
            b3 = a3; // error
            ~~
!!! Type 'A<T>' is not assignable to type '{ [x: string]: Derived; }':
!!!   Index signatures are incompatible:
!!!     Type 'T' is not assignable to type 'Derived':
!!!       Property 'bar' is missing in type 'Base'.
    
            var b4: { [x: string]: Derived2; };
            a3 = b4; // error
            ~~
!!! Type '{ [x: string]: Derived2; }' is not assignable to type 'A<T>':
!!!   Index signatures are incompatible:
!!!     Type 'Derived2' is not assignable to type 'T'.
            b4 = a3; // error
            ~~
!!! Type 'A<T>' is not assignable to type '{ [x: string]: Derived2; }':
!!!   Index signatures are incompatible:
!!!     Type 'T' is not assignable to type 'Derived2':
!!!       Property 'baz' is missing in type 'Base'.
        }
    }