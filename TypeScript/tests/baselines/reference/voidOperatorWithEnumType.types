=== tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithEnumType.ts ===
// void  operator on enum type

enum ENUM { };
>ENUM : ENUM

enum ENUM1 { 1, 2, "" };
>ENUM1 : ENUM1

// enum type var
var ResultIsAny1 = void ENUM;
>ResultIsAny1 : any
>void ENUM : undefined
>ENUM : typeof ENUM

var ResultIsAny2 = void ENUM1;
>ResultIsAny2 : any
>void ENUM1 : undefined
>ENUM1 : typeof ENUM1

// enum type expressions
var ResultIsAny3 = void ENUM1[0];
>ResultIsAny3 : any
>void ENUM1[0] : undefined
>ENUM1[0] : string
>ENUM1 : typeof ENUM1

var ResultIsAny4 = void (ENUM[0] + ENUM1[1]);
>ResultIsAny4 : any
>void (ENUM[0] + ENUM1[1]) : undefined
>(ENUM[0] + ENUM1[1]) : string
>ENUM[0] + ENUM1[1] : string
>ENUM[0] : string
>ENUM : typeof ENUM
>ENUM1[1] : ENUM1
>ENUM1 : typeof ENUM1

// multiple void  operators
var ResultIsAny5 = void void ENUM;
>ResultIsAny5 : any
>void void ENUM : undefined
>void ENUM : undefined
>ENUM : typeof ENUM

var ResultIsAny6 = void void void (ENUM[0] + ENUM1[1]);
>ResultIsAny6 : any
>void void void (ENUM[0] + ENUM1[1]) : undefined
>void void (ENUM[0] + ENUM1[1]) : undefined
>void (ENUM[0] + ENUM1[1]) : undefined
>(ENUM[0] + ENUM1[1]) : string
>ENUM[0] + ENUM1[1] : string
>ENUM[0] : string
>ENUM : typeof ENUM
>ENUM1[1] : ENUM1
>ENUM1 : typeof ENUM1

// miss assignment operators
void ENUM;
>void ENUM : undefined
>ENUM : typeof ENUM

void ENUM1;
>void ENUM1 : undefined
>ENUM1 : typeof ENUM1

void ENUM1[1];
>void ENUM1[1] : undefined
>ENUM1[1] : ENUM1
>ENUM1 : typeof ENUM1

void ENUM, ENUM1;
>void ENUM, ENUM1 : typeof ENUM1
>void ENUM : undefined
>ENUM : typeof ENUM
>ENUM1 : typeof ENUM1

