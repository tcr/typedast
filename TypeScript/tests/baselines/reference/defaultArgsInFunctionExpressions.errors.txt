==== tests/cases/compiler/defaultArgsInFunctionExpressions.ts (8 errors) ====
    var f = function (a = 3) { return a; }; // Type should be (a?: number) => number
    var n: number = f(4);
    n = f();
    var s: string = f('');
                      ~~
!!! Argument of type 'string' is not assignable to parameter of type 'number'.
    s = f();
    ~
!!! Type 'number' is not assignable to type 'string'.
    
    // Type check the default argument with the type annotation
    var f2 = function (a: string = 3) { return a; }; // Should error, but be of type (a: string) => string;
                       ~~~~~~~~~~~~~
!!! Type 'number' is not assignable to type 'string'.
    s = f2('');
    s = f2();
    n = f2();
    ~
!!! Type 'string' is not assignable to type 'number'.
    
    // Contextually type the default arg with the type annotation
    var f3 = function (a: (s: string) => any = (s) => <number>s) { };
                                                      ~~~~~~~~~
!!! Neither type 'number' nor type 'string' is assignable to the other.
    
    // Type check using the function's contextual type
    var f4: (a: number) => void = function (a = "") { };
                                            ~~~~~~
!!! Type 'string' is not assignable to type 'number'.
    
    // Contextually type the default arg using the function's contextual type
    var f5: (a: (s: string) => any) => void = function (a = s => <number>s) { };
                                                                 ~~~~~~~~~
!!! Neither type 'number' nor type 'string' is assignable to the other.
    
    // Instantiated module
    module T { }
    module U {
        export var x;
    }
    
    var f6 = (t = T) => { };
                  ~
!!! Cannot find name 'T'.
    var f7 = (t = U) => { return t; };
    
    f7().x;